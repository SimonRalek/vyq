const std = @import("std");

const _scanner = @import("scanner.zig");
const Scanner = _scanner.Scanner;
const Location = _scanner.Location;

pub const Token = struct {
    type: Type,
    lexeme: []const u8,
    location: Location,
    message: ?[]const u8 = null,
};

pub const Type = enum(u8) {
    left_paren,
    right_paren,
    left_brace,
    right_brace,
    comma,
    dot,
    minus,
    add_operator,
    min_operator,
    mul_operator,
    div_operator,
    decrement,
    plus,
    increment,
    semicolon,
    slash,
    star,
    bang,
    not_equal,
    assign,
    equal,
    greater,
    greater_equal,
    less,
    less_equal,
    identifier,
    string,
    number,
    hexadecimal,
    octal,
    binary,
    zaroven,
    nebo,
    tiskni,
    tiskniN,
    vrat,
    super,
    this,
    ano,
    ne,
    trida,
    jinak,
    opakuj,
    funkce,
    pokud,
    nic,
    prm,
    konst,
    dokud,
    eof,
    chyba,
    pokracuj,
    vlastni,
    colon,
    question_mark,
    zastav,
    shift_right,
    shift_left,
    bw_and,
    bw_or,
    bw_xor,
    bw_not,
    jako,
    until,
    dolu,
    po,
    vyber,
    pripad,
    arrow,
};

pub const Keywords = std.ComptimeStringMap(Type, .{
    .{ "ano", .ano },
    .{ "ne", .ne },
    .{ "pokud", .pokud },
    .{ "jinak", .jinak },
    .{ "prm", .prm },
    .{ "konst", .konst },
    .{ "opakuj", .opakuj },
    .{ "dokud", .dokud },
    .{ "nic", .nic },
    .{ "nebo", .nebo },
    .{ "zaroven", .zaroven },
    .{ "pokracuj", .pokracuj },
    .{ "vlastni", .vlastni },
    .{ "tiskni", .tiskni },
    .{ "tiskniB", .tiskniN },
    .{ "zastav", .zastav },
    .{ "jako", .jako },
    .{ "dolu", .dolu },
    .{ "vyber", .vyber },
    .{ "pripad", .pripad },
    .{ "po", .po },
    .{ "funkce", .funkce },
    .{ "vrat", .vrat },
});
